{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Modal","props","className","글제목","누른제목","Profile","state","name","age","this","setState","onClick","changeName","bind","React","Component","App","useState","글제목변경","따봉","따봉변경","modal","modal변경","누른제목변경","입력값","입력값변경","map","글","i","onChange","e","target","value","arrayCopy","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAwDA,SAASA,EAAMC,GAEb,OACE,sBAAKC,UAAU,QAAf,UACI,+BAAKD,EAAME,mBAAIF,EAAMG,0BAArB,OACA,6CACA,4D,IAKFC,E,kDAEJ,aACC,IAAD,8BACE,gBACKC,MAAQ,CACTC,KAAO,MACPC,IAAM,IAJZ,E,8CAQA,WAEEC,KAAKC,SAAS,CAACH,KAAO,W,oBAGxB,WACE,OACE,gCACE,uEACA,8CAAOE,KAAKH,MAAMC,KAAlB,yBACA,wBAAQI,QAAUF,KAAKG,WAAWC,KAAKJ,MAAvC,iC,GArBcK,IAAMC,WA4BbC,EA3Ff,WAGE,IAEA,EAAkBC,mBAAS,CAAC,yCAAY,yCAAY,oCAApD,mBAAKd,EAAL,KAASe,EAAT,KACA,EAAiBD,mBAAS,GAA1B,mBAAKE,EAAL,KAASC,EAAT,KACA,EAAsBH,oBAAS,GAA/B,mBAAKI,EAAL,KAAWC,EAAX,KACA,EAAoBL,mBAAS,GAA7B,mBAAKb,EAAL,KAAUmB,EAAV,KACA,EAAmBN,mBAAS,IAA5B,mBAAKO,EAAL,KAASC,EAAT,KASA,OACE,sBAAKvB,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,sDAGAC,EAAIuB,KAAI,SAACC,EAAEC,GACT,OACE,sBAAK1B,UAAU,OAAf,UACE,qBAAIS,QAAU,WAAOY,EAAOK,IAA5B,UAAmCD,EAAE,sBAAMhB,QAAU,WAAOS,EAAKD,EAAK,IAAjC,0BAAiDA,KACtF,8DACA,yBAHyBS,MAQjC,cAAC,EAAD,IACA,sBAAK1B,UAAU,UAAf,UACE,uBAAQ2B,SAAU,SAACC,GAAOL,EAAMK,EAAEC,OAAOC,UACzC,wBAAQrB,QAAU,WAChB,IAAIsB,EAAS,YAAO9B,GACpB8B,EAAUC,QAAQV,GAClBN,EAAMe,IAHR,6BAOF,wBAAQtB,QAAU,WAAQW,GAASD,IAAnC,2BAEY,IAAVA,EAAiB,cAACrB,EAAD,CAAO,2BAAMI,EAAM,qBAAKD,IAAU,SCtC5CgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c0f7ca9.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, {useState} from 'react';\nimport './App.css';\n\nfunction App() \n{\n\n  let posts = '강남 고기 맛집';\n\n  let [글제목,글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '예진이 일기']);  \n  let [따봉, 따봉변경] = useState(0);\n  let [modal,modal변경] = useState(false);\n  let [누른제목,누른제목변경] = useState(0);\n  let [입력값,입력값변경]  = useState('');\n  //function 제목바꾸기()\n  //{\n  //  var newArray = [...글제목];\n  //  newArray[0] = '여자 코트 추천';\n  //  글제목변경(newArray);\n  //}\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"black-nav\">\n        <div>개발 Blog</div>\n      </div>\n      {\n        글제목.map((글,i) => { \n          return (\n            <div className=\"list\" key={i}>\n              <h3 onClick={ () => {누른제목변경(i)} }>{글}<span onClick={ () => {따봉변경(따봉 + 1)} }>👍</span>{따봉}</h3>\n              <p>2월 17일 발행</p>\n              <hr/>\n            </div>\n          )\n        })\n      }\n      <Profile />\n      <div className=\"publish\">\n        <input  onChange={(e) => {입력값변경(e.target.value)} } />\n        <button onClick={ () => {\n          var arrayCopy = [...글제목];\n          arrayCopy.unshift(입력값);\n          글제목변경(arrayCopy);\n        }}>저장</button>\n      </div>\n\n      <button onClick={ () => { modal변경(!modal) } }>버튼</button>\n      {\n        modal === true ? <Modal 누른제목={누른제목} 글제목={글제목} /> : null\n      }\n    </div>\n  );\n}\n\nfunction Modal(props)\n{\n  return (\n    <div className=\"modal\">\n        <h2>{props.글제목[props.누른제목]} </h2>\n        <p>날짜</p>\n        <p>상세내용</p>\n      </div>\n  )\n}\n\nclass Profile extends React.Component \n{\n  constructor()\n  {\n    super();\n    this.state = {\n        name : \"Kim\"\n      , age : 30\n    };\n  }\n\n  changeName()\n  {\n    this.setState({name : \"Park\"});\n  }\n\n  render(){\n    return (\n      <div>\n        <h3>프로필입니다.</h3>\n        <p>저는 {this.state.name}입니다.</p>\n        <button onClick={ this.changeName.bind(this) }>버튼</button>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}